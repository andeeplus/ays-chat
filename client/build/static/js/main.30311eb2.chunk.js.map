{"version":3,"sources":["Home/LoginBox/LoginBox.jsx","Home/Home.jsx","useChat.js","ChatRoom/MessageInput/MessageInput.jsx","ChatRoom/MessageBoard/MessageBoard.jsx","ChatRoom/ChatHeader/ChatHeader.jsx","ChatRoom/ChatRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["LoginBox","React","useState","roomName","setRoomName","username","setUsername","column","alignItems","p","justifyContent","width","border","borderColor","borderRadius","type","placeholder","value","textAlign","boxSizing","m","onChange","event","target","to","Home","height","useChat","roomId","name","messages","setMessages","connectedUsers","setConnectedUsers","useRef","socketRef","useEffect","current","socketIOClient","query","on","backupMsg","length","message","incomingMessage","ownedByCurrentUser","senderId","id","users","disconnect","sendMessage","messageBody","emit","body","WriteMessage","newMessage","setNewMessage","css","position","bottom","fontSize","size","right","onClick","Message","styled","Box","defaultProps","checkPrevMessageSameUser","i","isSameUser","AlwaysScrollToBottom","elementRef","scrollIntoView","ref","MessageBoard","props","margin","mt","overflow","borderTop","map","alignSelf","key","bg","mb","display","px","my","textSize","color","textTransform","ChatHeader","mx","mr","connected","socketId","ChatRoom","match","params","location","search","split","maxHeight","MessageInput","GlobalStyle","createGlobalStyle","App","theme","exact","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sSAoDeA,EAhDE,WAAO,IAAD,EACWC,IAAMC,SAAS,IAD1B,mBACdC,EADc,KACJC,EADI,OAEWH,IAAMC,SAAS,IAF1B,mBAEdG,EAFc,KAEJC,EAFI,KAYrB,OACE,kBAAC,MAAD,CACEC,QAAM,EACNC,WAAW,SACXC,EAAG,EACHC,eAAe,SACfC,MAAO,IACPC,OAAO,YACPC,YAAY,SACZC,aAAa,OAEb,kBAAC,aAAD,CACEC,KAAK,OACLC,YAAY,OACZC,MAAOd,EACPe,UAAU,SACVC,UAAU,aACVC,EAAG,EACHC,SA1BuB,SAACC,GAC5BlB,EAAYkB,EAAMC,OAAON,UA2BvB,kBAAC,aAAD,CACEF,KAAK,OACLC,YAAY,WACZC,MAAOZ,EACPa,UAAU,SACVC,UAAU,aACVC,EAAG,EACHC,SA/BuB,SAACC,GAC5BhB,EAAYgB,EAAMC,OAAON,UAgCvB,kBAAC,IAAD,CAAMO,GAAE,WAAMrB,EAAN,qBAA2BE,IACjC,kBAAC,SAAD,CAAQe,EAAG,GAAX,gBC7BOK,EAbF,WACX,OACE,kBAAC,MAAD,CACEC,OAAO,QACPf,MAAM,OACND,eAAe,SACfF,WAAW,UAEX,kBAAC,EAAD,Q,iCC8CSmB,EA9CC,SAACC,EAAQC,GAAU,IAAD,EACA3B,mBAAS,IADT,mBACzB4B,EADyB,KACfC,EADe,OAEY7B,mBAAS,IAFrB,mBAEzB8B,EAFyB,KAETC,EAFS,KAG1B5B,EAAW6B,iBAAOL,GAClBM,EAAYD,mBAElBE,qBAAU,WAwBR,OAvBAD,EAAUE,QAAUC,IATlB,uCASoD,CACpDC,MAAO,CAAEX,SAAQvB,SAAUA,EAASgC,WAGtCF,EAAUE,QAAQG,GAlBK,eAkBkB,SAACC,GACpCA,IACGX,EAASY,OACTX,GAAY,SAACD,GAAD,4BAAkBW,GAAlB,YAAgCX,OAD3BC,EAAYU,OAKtCN,EAAUE,QAAQG,GA3BS,kBA2BkB,SAACG,GAC5C,IAAMC,EAAe,2BAChBD,GADgB,IAEnBE,mBAAoBF,EAAQG,WAAaX,EAAUE,QAAQU,KAE7DhB,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,CAA4Bc,UAG1CT,EAAUE,QAAQG,GAlCW,oBAkCkB,SAACQ,GAC9Cf,EAAkBe,EAAMpB,OAGnB,WACLO,EAAUE,QAAQY,gBAGnB,CAACrB,EAAQvB,IASZ,MAAO,CAAEyB,WAAUoB,YAPC,SAACC,GACnBhB,EAAUE,QAAQe,KA9CS,iBA8CoB,CAC7CC,KAAMF,EACNL,SAAUX,EAAUE,QAAQU,MAIAf,mBCRnBsB,EA5CM,SAAC,GAAqB,IAAnBJ,EAAkB,EAAlBA,YAAkB,EACJjD,IAAMC,SAAS,IADX,mBACjCqD,EADiC,KACrBC,EADqB,KAYxC,OACE,kBAAC,MAAD,CACE9B,OAAO,OACPN,EAAG,EACHqC,IAAI,wBACJC,SAAS,QACTC,OAAQ,EACRhD,MAAM,0BAEN,kBAAC,WAAD,CACEF,EAAG,EACHU,UAAU,aACVF,MAAOsC,EACPlC,SAtByB,SAACC,GAC9BkC,EAAclC,EAAMC,OAAON,QAsBvBD,YAAY,mBACZ4C,SAAS,SAEX,kBAAC,eAAD,CACE7C,KAAK,aACL8C,KAAM,GACNH,SAAS,WACTC,OAAQ,EACRG,MAAO,EACP1C,EAAG,EACH2C,QA7BoB,WACxBb,EAAYK,GACZC,EAAc,MAoBZ,U,yHC3BN,IAAMQ,EAAUC,kBAAOC,MAAPD,CAAH,KAIbD,EAAQG,aAAe,CACrB1D,EAAG,EACHE,MAAO,MACPG,aAAc,OAGhB,IAAMsD,EAA2B,SAACtC,EAAUuC,GAC1C,OAAOvC,EAASuC,EAAI,IAAMvC,EAASuC,EAAI,GAAGhE,WAAayB,EAASuC,GAAGhE,UAG/DiE,EAAa,SAAC3B,EAAStC,GAC3B,OAAOsC,EAAQE,oBAAsBF,EAAQtC,WAAaA,GAGtDkE,EAAuB,WAC3B,IAAMC,EAAatC,mBAInB,OAHAE,qBAAU,WACRoC,EAAWnC,QAAQoC,oBAEd,yBAAKC,IAAKF,KA2DJG,EAxDM,SAAC,GAAsC,IAApC7C,EAAmC,EAAnCA,SAAUzB,EAAyB,EAAzBA,SAAauE,EAAY,uCACzD,OACE,kBAAC,MAAD,eACErE,QAAM,EACNkD,IAAI,yBACJoB,OAAQ,EACRC,GAAI,EACJrE,EAAG,EACHE,MAAM,OACNoE,SAAS,SACTC,UAAU,YACVnE,YAAY,UACR+D,GAEH9C,EAASmD,KAAI,SAACtC,EAAS0B,GAAV,OACZ,kBAACL,EAAD,CAEEkB,UAAWZ,EAAW3B,EAAStC,GAAY,WAAa,aACxDK,eACE4D,EAAW3B,EAAStC,GAAY,WAAa,aAE/C8E,IAAKd,EACLe,GAAId,EAAW3B,EAAStC,GAAY,SAAW,WAC/CS,aAAa,MACbuE,GAAI,GAEJ,kBAAC,MAAD,CAAK9E,QAAM,GACT,kBAAC,MAAD,CACE+E,QAASlB,EAAyBtC,EAAUuC,GAAK,OAAS,OAC1Da,UACEZ,EAAW3B,EAAStC,GAAY,WAAa,aAE/CkF,GAAI,EACJC,GAAI,EACJ1E,aAAa,MACbsE,GAAG,SACHzE,MAAM,eAEN,kBAAC,OAAD,CAAM8E,SAAS,KAAKC,MAAM,QAAQC,cAAc,aAC7ChD,EAAQtC,WAGb,kBAAC,OAAD,CACEa,UAAWoD,EAAW3B,EAAStC,GAAY,MAAQ,QACnDoF,SAAS,MAER9C,EAAQU,WAKjB,kBAAC,EAAD,QCjDSuC,EA9BI,SAAC,GAAgC,IAA9B5D,EAA6B,EAA7BA,eAAgBJ,EAAa,EAAbA,OACpC,OACE,kBAAC,MAAD,CAAKrB,QAAM,EAACmB,OAAQ,CAAC,SAAU0D,GAAG,SAChC,kBAAC,UAAD,CAAShE,EAAG,GAAZ,SAAsBQ,GACtB,kBAAC,MAAD,CAAKrB,QAAM,EAACsF,GAAI,EAAGrF,WAAW,cAC5B,kBAAC,OAAD,CAAMiF,SAAS,KAAKK,GAAI,GAAxB,mBACmB,KAEnB,kBAAC,MAAD,KACG9D,EAAeiD,KAAI,SAACc,GAAD,OAClB,kBAAC,MAAD,CACEZ,IAAKY,EAAUC,SACfT,GAAI,EACJC,GAAI,EACJM,GAAI,EACJhF,aAAa,MACbsE,GAAG,SACHzE,MAAM,eAEN,kBAAC,OAAD,CAAM8E,SAAS,KAAKE,cAAc,YAAYD,MAAM,SACjDK,EAAU1F,kBCFZ4F,EAdE,SAACrB,GAAW,IACnBhD,EAAWgD,EAAMsB,MAAMC,OAAvBvE,OACFvB,EAAWuE,EAAMwB,SAASC,OAAOC,MAAM,cAAc,GAFjC,EAGwB3E,EAAQC,EAAQvB,GAA1DyB,EAHkB,EAGlBA,SAAUoB,EAHQ,EAGRA,YAAalB,EAHL,EAGKA,eAE/B,OACE,kBAAC,MAAD,CAAKzB,QAAM,EAACgG,UAAU,SACpB,kBAAC,EAAD,CAAYvE,eAAgBA,EAAgBJ,OAAQA,IACpD,kBAAC,EAAD,CAAcE,SAAUA,EAAUzB,SAAUA,IAC5C,kBAACmG,EAAD,CAActD,YAAaA,M,yWCPjC,IAAMuD,EAAcC,4BAAH,KA4BFC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAACF,EAAD,MACA,kBAAC,gBAAD,CAAeG,MAAOA,SACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtF,IACjC,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,WAAWC,UAAWd,QClB9Be,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAAShB,MACvB,2DCZNiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpF,c","file":"static/js/main.30311eb2.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, InputField, Box } from '@andeeplus/aplus-ui'\n\nconst LoginBox = () => {\n  const [roomName, setRoomName] = React.useState('')\n  const [username, setUsername] = React.useState('')\n\n  const handleRoomNameChange = (event) => {\n    setRoomName(event.target.value)\n  }\n\n  const handleUsernameChange = (event) => {\n    setUsername(event.target.value)\n  }\n\n  return (\n    <Box\n      column\n      alignItems=\"center\"\n      p={3}\n      justifyContent=\"center\"\n      width={320}\n      border=\"1px solid\"\n      borderColor=\"gray.2\"\n      borderRadius=\"3px\"\n    >\n      <InputField\n        type=\"text\"\n        placeholder=\"Room\"\n        value={roomName}\n        textAlign=\"center\"\n        boxSizing=\"border-box\"\n        m={2}\n        onChange={handleRoomNameChange}\n      />\n      <InputField\n        type=\"text\"\n        placeholder=\"Username\"\n        value={username}\n        textAlign=\"center\"\n        boxSizing=\"border-box\"\n        m={2}\n        onChange={handleUsernameChange}\n      />\n      <Link to={`/${roomName}?username=${username}`}>\n        <Button m={2}>Join room</Button>\n      </Link>\n    </Box>\n  )\n}\n\nexport default LoginBox\n","import React from 'react'\nimport { Box } from '@andeeplus/aplus-ui'\nimport LoginBox from './LoginBox'\n\nconst Home = () => {\n  return (\n    <Box\n      height=\"100vh\"\n      width=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <LoginBox />\n    </Box>\n  )\n}\n\nexport default Home\n","import { useEffect, useRef, useState } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nconst NEW_CHAT_MESSAGE_EVENT = 'newChatMessage'\nconst NEW_USER_CONNECTED_EVENT = 'newUserConnected'\nconst LATEST_50MSG_EVENT = 'Latest50msg'\n\nconst SOCKET_SERVER_URL =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:4000'\n    : 'https://radio.armyoursampler.com/api'\n\nconst useChat = (roomId, name) => {\n  const [messages, setMessages] = useState([])\n  const [connectedUsers, setConnectedUsers] = useState([])\n  const username = useRef(name)\n  const socketRef = useRef()\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId, username: username.current },\n    })\n\n    socketRef.current.on(LATEST_50MSG_EVENT, (backupMsg) => {\n      if (backupMsg) {\n        if (!messages.length) setMessages(backupMsg)\n        else setMessages((messages) => [...backupMsg, ...messages])\n      }\n    })\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      }\n      setMessages((messages) => [...messages, incomingMessage])\n    })\n\n    socketRef.current.on(NEW_USER_CONNECTED_EVENT, (users) => {\n      setConnectedUsers(users[roomId])\n    })\n\n    return () => {\n      socketRef.current.disconnect()\n    }\n    // eslint-disable-next-line\n  }, [roomId, username])\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    })\n  }\n\n  return { messages, sendMessage, connectedUsers }\n}\n\nexport default useChat\n","import React from 'react'\nimport { Box, TextArea, ActionButton } from '@andeeplus/aplus-ui'\n\nconst WriteMessage = ({ sendMessage }) => {\n  const [newMessage, setNewMessage] = React.useState('')\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value)\n  }\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage)\n    setNewMessage('')\n  }\n\n  return (\n    <Box\n      height=\"80px\"\n      m={3}\n      css=\"textarea{resize:none}\"\n      position=\"fixed\"\n      bottom={0}\n      width=\"-webkit-fill-available\"\n    >\n      <TextArea\n        p={2}\n        boxSizing=\"border-box\"\n        value={newMessage}\n        onChange={handleNewMessageChange}\n        placeholder=\"Write message...\"\n        fontSize=\"16px\"\n      />\n      <ActionButton\n        type=\"arrowRight\"\n        size={20}\n        position=\"absolute\"\n        bottom={0}\n        right={0}\n        m={2}\n        onClick={handleSendMessage}\n      >\n        Send\n      </ActionButton>\n    </Box>\n  )\n}\n\nexport default WriteMessage\n","import React, { useEffect, useRef } from 'react'\n\nimport { Box, Text } from '@andeeplus/aplus-ui'\nimport styled from 'styled-components'\n\nconst Message = styled(Box)`\n  width: 55%;\n  word-break: break-word;\n`\nMessage.defaultProps = {\n  p: 1,\n  width: '55%',\n  borderRadius: '3px',\n}\n\nconst checkPrevMessageSameUser = (messages, i) => {\n  return messages[i - 1] && messages[i - 1].username === messages[i].username\n}\n\nconst isSameUser = (message, username) => {\n  return message.ownedByCurrentUser || message.username === username\n}\n\nconst AlwaysScrollToBottom = () => {\n  const elementRef = useRef()\n  useEffect(() => {\n    elementRef.current.scrollIntoView()\n  })\n  return <div ref={elementRef} />\n}\n\nconst MessageBoard = ({ messages, username, ...props }) => {\n  return (\n    <Box\n      column\n      css=\"list-style-type: none;\"\n      margin={0}\n      mt={5}\n      p={3}\n      width=\"100%\"\n      overflow=\"scroll\"\n      borderTop=\"1px solid\"\n      borderColor=\"gray.2\"\n      {...props}\n    >\n      {messages.map((message, i) => (\n        <Message\n\n          alignSelf={isSameUser(message, username) ? 'flex-end' : 'flex-start'}\n          justifyContent={\n            isSameUser(message, username) ? 'flex-end' : 'flex-start'\n          }\n          key={i}\n          bg={isSameUser(message, username) ? 'gray.1' : 'yellow.0'}\n          borderRadius=\"3px\"\n          mb={3}\n        >\n          <Box column>\n            <Box\n              display={checkPrevMessageSameUser(messages, i) ? 'none' : 'flex'}\n              alignSelf={\n                isSameUser(message, username) ? 'flex-end' : 'flex-start'\n              }\n              px={1}\n              my={1}\n              borderRadius=\"3px\"\n              bg=\"gray.7\"\n              width=\"fit-content\"\n            >\n              <Text textSize=\"xs\" color=\"white\" textTransform=\"uppercase\">\n                {message.username}\n              </Text>\n            </Box>\n            <Text\n              textAlign={isSameUser(message, username) ? 'end' : 'start'}\n              textSize=\"sm\"\n            >\n              {message.body}\n            </Text>\n          </Box>\n        </Message>\n      ))}\n      <AlwaysScrollToBottom />\n    </Box>\n  )\n}\n\nexport default MessageBoard\n","import React from 'react'\nimport { Box, Heading, Text } from '@andeeplus/aplus-ui'\n\nconst ChatHeader = ({ connectedUsers, roomId }) => {\n  return (\n    <Box column height={['100px']} bg=\"white\">\n      <Heading m={3}>Room: {roomId}</Heading>\n      <Box column mx={3} alignItems=\"flex-start\">\n        <Text textSize=\"xs\" mr={1}>\n          Connected users:{' '}\n        </Text>\n        <Box>\n          {connectedUsers.map((connected) => (\n            <Box\n              key={connected.socketId}\n              px={1}\n              my={1}\n              mr={1}\n              borderRadius=\"3px\"\n              bg=\"gray.7\"\n              width=\"fit-content\"\n            >\n              <Text textSize=\"xs\" textTransform=\"uppercase\" color=\"white\">\n                {connected.username}\n              </Text>\n            </Box>\n          ))}\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default ChatHeader\n","import React from 'react'\nimport useChat from '../useChat'\nimport { Box } from '@andeeplus/aplus-ui'\nimport MessageInput from './MessageInput'\nimport MessageBoard from './MessageBoard'\nimport ChatHeader from './ChatHeader'\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params\n  const username = props.location.search.split('?username=')[1]\n  const { messages, sendMessage, connectedUsers } = useChat(roomId, username)\n\n  return (\n    <Box column maxHeight=\"100vh\">\n      <ChatHeader connectedUsers={connectedUsers} roomId={roomId} />\n      <MessageBoard messages={messages} username={username} />\n      <MessageInput sendMessage={sendMessage} />\n    </Box>\n  )\n}\n\nexport default ChatRoom\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { theme } from '@andeeplus/aplus-ui'\nimport { ThemeProvider, createGlobalStyle } from 'styled-components'\n\nimport './index.css'\nimport Home from './Home/Home'\nimport ChatRoom from './ChatRoom/ChatRoom'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    height: 100%;\n    margin: 0;\n  }\n\n  body, input, button, a, textarea {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n  }\n`\n\nfunction App() {\n  return (\n    <Router>\n      <GlobalStyle />\n      <ThemeProvider theme={theme}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/:roomId\" component={ChatRoom} />\n        </Switch>\n      </ThemeProvider>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}